
前言 {.unnumbered}
Geocomputation with Python（簡稱 geocompy）的動機在於提供一本入門教材，協助使用全球最受歡迎的程式語言 Python 處理地理資料。
本書的獨特賣點在於其整合性高的內容編排，涵蓋了向量與柵格兩種地理資料模型，並具備穩定一致的學習曲線。
我們致力於減少學習上的意外與困惑，各章節間環環相扣、層層遞進。
若您正開始使用 Python 處理地理資料，本書將是絕佳的起點。

雖然目前已有許多與「GeoPython」相關的資源，但尚缺一本真正從入門角度切入，為未來進階學習奠定紮實基礎的教材。
我們不打算重複造輪，而是希望填補自由開源地理資訊軟體（FOSS4G）生態系中的「生態位」，提供具有差異性的資源。

📌 本書的核心特色包括：

1. 紮實掌握基本操作技巧
2. 整合向量與柵格資料集的處理作業
3. 明確解說書中每一行程式碼，以減少學習障礙
<!-- 4.  Exercises at the end of each chapter with reproducible and open solutions -->
4. 提供清晰的範例資料集與具意義的操作，展現地理研究的應用性


📚 本書亦與相關 GeoPython 書籍形成互補並提升整體價值，以下為幾本參考書目的簡略比較：

- _Learning Geospatial Analysis with Python_ 和 _Geoprocessing with Python_ 專注於透過 GDAL 的底層 Python 介面（如 **gdal**、**gdalnumeric** 和 **ogr**）處理空間資料，需撰寫更多程式碼。本書則採較符合 Python 語言風格（"Pythonic"）且具未來性的方法，因為我們使用如 **geopandas** 與 **rasterio** 等新型套件。
- _Introduction to Python for Geographic Data Analysis_（尚在撰寫中）旨在提供「Python GIS」的一般性介紹，包括 Python 基礎知識、GIS 應用、案例分析等。本書（亦為開放原始碼，托管於 pythongis.org）則範疇較窄，不包含空間網路分析，但深入探討柵格資料處理以及柵格與向量資料的互操作性。
- _Geographic Data Science with Python_ 為雄心勃勃的計畫，涵蓋進階主題，如第 4 章關於空間權重，較早就深入複雜的議題。
- _Python for Geospatial Data Analysis_ 涵蓋多種處理地理資料的策略，包括自動化專有與開源 GIS 軟體操作，也包括獨立的 Python 開源套件（即本書重點介紹並深入解析的內容）。相較之下，_geocompy_ 更簡潔、適合入門，並平衡探討柵格與向量資料。

[^book_1]: [https://www.packtpub.com/product/learning-geospatial-analysis-with-python/9781783281138](https://www.packtpub.com/product/learning-geospatial-analysis-with-python/9781783281138)

[^book_2]: [https://www.manning.com/books/geoprocessing-with-python](https://www.manning.com/books/geoprocessing-with-python)

[^book_3]: [https://pythongis.org](https://pythongis.org)

[^book_4]: [https://geographicdata.science/book/intro.html](https://geographicdata.science/book/intro.html)

[^book_5]: [https://www.oreilly.com/library/view/python-for-geospatial/9781098104788/](https://www.oreilly.com/library/view/python-for-geospatial/9781098104788/)

另一個本書獨特的特色是它屬於一個更廣泛的社群網絡。 
Geocomputation with Python 是 Geocomputation with R[^geocompr][@lovelace_geocomputation_2019] 的姊妹計畫，後者是一本以 R 程式語言進行地理資料分析、視覺化與建模的著作，擁有 60 多位貢獻者與活躍的社群，其中包括其專屬 Discord 群組[^geocompr_discord]。
📡 與充滿活力的「R-spatial」社群，以及如 GeoRust、JuliaGeo 等其他社群的連結，促成了多項跨開源生態系的互利交流與合作機會。

[^geocompr]: [https://r.geocompx.org/](https://r.geocompx.org/)

[^geocompr_discord]: [https://discord.gg/PMztXYgNxp](https://discord.gg/PMztXYgNxp)

## 建議背景知識（Prerequisites）

我們假設讀者已具備以下基礎：

- 熟悉 Python 語言
- 能夠執行 Python 程式碼並安裝相關套件
- 熟悉 `numpy` 與 `pandas` 套件，可用於處理 Python 中的資料

在這樣的起點下，本書將逐步引導讀者使用 Python 處理_空間資料_，藉由專門的第三方套件進行操作——其中最重要的是 `geopandas` 與 `rasterio`。

我們同時假設讀者已瞭解地理資料與地理資訊系統（GIS）的理論概念，例如座標系統、投影法、空間圖層檔案格式等，這些知識有助於理解書中的範例邏輯與推理。


## 程式碼與範例資料

若要執行書中的程式碼範例，可下載 GitHub 儲存庫的 ZIP 檔案[^book_data_zip]。在該 ZIP 檔中，`ipynb` 資料夾包含各章節的 Jupyter Notebook 原始檔，`data` 資料夾內含範例資料，`output` 資料夾則存有由程式碼產生的輸出檔案（部分也用作其他範例段落的輸入）。執行程式碼時，請將這些資料夾按下列結構置於同一目錄中：

[^book_data_zip]: [https://github.com/geocompx/geocompy/zipball/master](https://github.com/geocompx/geocompy/zipball/master)

```text
├── data
│   ├── aut.tif
│   ├── ch.tif
│   ├── coffee_data.csv
│   ├── cycle_hire.gpkg
│   ├── cycle_hire_osm.gpkg
│   ├── cycle_hire_xy.csv
│   ├── dem.tif
│   ├── landsat.tif
│   ├── nlcd.tif
│   ├── nz_elev.tif
│   ├── nz.gpkg
│   ├── nz_height.gpkg
│   ├── seine.gpkg
│   ├── srtm.tif
│   ├── us_states.gpkg
│   ├── world.gpkg
│   ├── world_wkt.csv
│   ├── zion.gpkg
│   └── zion_points.gpkg
├── output
│   ├── cycle_hire_xy.csv
│   ├── dem_agg5.tif
│   ├── dem_contour.gpkg
│   ├── dem_resample_maximum.tif
│   ├── dem_resample_nearest.tif
│   ├── elev.tif
│   ├── grain.tif
│   ├── map.html
│   ├── ne_10m_airports.cpg
│   ├── ne_10m_airports.dbf
│   ├── ne_10m_airports.prj
│   ├── ne_10m_airports.README.html
│   ├── ne_10m_airports.shp
│   ├── ne_10m_airports.shx
│   ├── ne_10m_airports.VERSION.txt
│   ├── ne_10m_airports.zip
│   ├── nlcd_4326_2.tif
│   ├── nlcd_4326.tif
│   ├── nlcd_modified_crs.tif
│   ├── plot_geopandas.jpg
│   ├── plot_rasterio2.svg
│   ├── plot_rasterio.jpg
│   ├── r3.tif
│   ├── r_nodata_float.tif
│   ├── r_nodata_int.tif
│   ├── r.tif
│   ├── srtm_32612_aspect.tif
│   ├── srtm_32612_slope.tif
│   ├── srtm_32612.tif
│   ├── srtm_masked_cropped.tif
│   ├── srtm_masked.tif
│   ├── w_many_features.gpkg
│   ├── w_many_layers.gpkg
│   └── world.gpkg
├── 01-spatial-data.ipynb
├── 02-attribute-operations.ipynb
├── 03-spatial-operations.ipynb
├── 04-geometry-operations.ipynb
├── 05-raster-vector.ipynb
├── 06-reproj.ipynb
├── 07-read-write.ipynb
└── 08-mapping.ipynb
```

## 軟體環境（Software）

本課程所使用的 Python 版本如下：  

```{python}
#| echo: false
import sys
print(sys.version)
```

教材內容執行時所依賴的主要套件版本如下所列：

```{python}
#| echo: false
import subprocess
packages = [
    'numpy',
    'pandas',
    'shapely',
    'geopandas',
    'rasterio',
    'matplotlib',
    'rasterstats'
]
result = ''
for i in packages:
    x = 'pip freeze | grep ^%s==' % i
    result += subprocess.run(x, shell=True, executable='/bin/bash', capture_output=True, text=True).stdout
print(result)

# Run micromamba list to get all installed packages and their versions
# cmd = "micromamba list -n geocompy"
# result = subprocess.run(cmd, shell=True, executable='/bin/bash', capture_output=True, text=True).stdout

# # Filter the result for the packages of interest
# filtered_result = ""
# lines = result.split('\n')
# # Skip all lines up to and including the header separator line
# start_index = next((i for i, line in enumerate(lines) if '─' in line), -1) + 1

# for line in lines[start_index:]:
#     if line.strip():  # Ensure the line is not empty
#         parts = line.split()
#         package_name = parts[0]  # Assuming package name is the first element
#         if package_name in packages:
#             version = parts[1] if len(parts) > 1 else "Unknown Version"
#             filtered_result += f"{package_name} {version}\n"

# print(filtered_result)
```

## 致謝（Acknowledgements）

本教材特別感謝 _Geocomputation with R_ 一書的三位作者 Robin Lovelace、Jakub Nowosad、Jannes Muenchow——其中 Robin 與 Jakub 亦為本書（Python 版本）的共同作者。其原著在地理資料分析、視覺化與建模方面奠定了理論與架構上的基礎，許多章節之內容、主題選擇與理論討論皆源自該書。

我們誠摯感謝 Python 語言的開發者，以及 **numpy**、**pandas**、**shapely**、**geopandas**、**rasterio** 等套件的貢獻者——這些套件在本課程與教材中廣泛使用，為地理計算提供了堅實且高效的工具組。

亦感謝 GitHub 使用者 Will Deakin、Sean Gillies、Josh Cole 及 Jt Miclat（依撰寫時期）於本教材開源開發過程中所提供之貢獻。完整名單請參見 GitHub 頁面[^github_contributors]。

[^github_contributors]: [https://github.com/geocompx/geocompy/graphs/contributors](https://github.com/geocompx/geocompy/graphs/contributors)
